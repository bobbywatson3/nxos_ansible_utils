#!/usr/bin/env python

# Copyright Cisco Systems
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_file_xfer

short_description: Copies files to NXOS devices.

description:
    - The image must be present on the remote server at the remote_path.


author: Bobby Watson (bwatsoni@cisco.com)

requirements:
    - Cisco NX-OS
    - pexpect

notes:
    - File copies may take an extended period of time. Because Ansible does not
    provide updates during this time, it may be beneficial to include a warning
    in the name of the task that lets the user know that there may be an extended
    period of non-responsiveness while the file is downloaded.

options:
    host:
        description:
            - Host NXOS device to copy file to.
        required: true
        default: null

    username:
        description:
            - Username used to login to NXOS device.
        required: true
        default: null

    password:
        description:
            - Password used to login to NXOS device.
        required: true
        default: null

    vrf:
        description:
            - VRF to use when copying file.
        required: false
        default: management

    remote_server:
        description:
            - IP address or hostname of remote server where file is hosted.
        required: true
        default: null

    remote_path:
        description:
            - Full path to file (but not including file name.)
        required: true
        default: null

    remote_user:
        description:
            - Username for remote server where file is hosted.
        required: true
        default: null

    remote_password:
        description:
            - Password for remote server where file is hosted.
        required: true
        default: null

    transport:
        description:
            - Method to use to download file. Choices are scp or ftp.
        required: true
        default: null
        choices: [scp, ftp]

    ftp_timeout:
        description:
            - FTP transfers don't provide status during download. This means
            that the module has to wait for a 'Copy complete' from the switch.
            The default timeout is 10 minutes, but this can be increased
            as needed.
        required: false
        default: 600

    filename:
        description:
            - Filename of image on remote server.
        required: true
        default: null

    destination:
        description:
            - Destination for file to be copied to.
        required: false
        default: bootflash:

    force:
        description:
            - Force copying file even if it already exists on NXOS device.
        required: false
        default: false


'''

EXAMPLES = '''
- name: Copy NXOS Image
  nxos_file_xfer:
    host: "{{ inventory_hostname }}"
    username: cisco
    password: cisco
    remote_server: 192.168.1.10
    remote_user: user
    remote_password: password
    transport: scp
    filename: n9000-dk9.7.0.3.I1.0.236.bin
    remote_path: /files/nxos
    destination: bootflash:
    vrf: management
    force: false

'''

from pexpect import pxssh
import pexpect
import os
from time import sleep


def file_copy(module, host, username, password, remote_server, remote_user,
              remote_password, transport, ftp_timeout, remote_path, filename,
              destination, vrf, force):
    try:
        p = pxssh.pxssh(options={"StrictHostKeyChecking": "no",
                                 "UserKnownHostsFile": "/dev/null"})
        # Enable the following line if you need to see all output. This will
        # make Ansible think that there was an error however.
        # p.logfile = sys.stdout
        p.force_password = True
        p.login(host, username, password, auto_prompt_reset=False)
        p.PROMPT = '\r\n.*# '

        # Make sure switch doesn't send any /b literals due to term width
        p.sendline(' terminal width 511')
        p.prompt()

        # If check mode enabled, see if file already exists.
        if module.check_mode:
            p.sendline('dir')
            i = p.expect([filename, "controller.*logflash", pexpect.TIMEOUT],
                         timeout=5)
            if i == 0:
                module.exit_json(changed=False)
            if i == 1:
                module.fail_json(msg="switch not running NXOS")
            if i == 2:
                module.exit_json(changed=True)

        # Remove '/' from beginning of path if it exists
        remote_path = remote_path.lstrip('/')

        full_path = os.path.join(remote_path, filename)

        def file_copy(module):
            p.sendline('copy {}://{}@{}/{} {} vrf {}'.format(transport,
                       remote_user, remote_server, full_path, destination, vrf))

        file_copy(module)

        # Handle any prompts that happen when initiating copy
        while True:
            sleep(1)
            i = p.expect(["(?i)cannot stat", "(?i)Cannot overwrite" +
                          " existing file", "(?i)do you want to overwrite",
                          "(?i)continue connecting", "(?i)Connection timed out",
                          "(?i)password", pexpect.TIMEOUT], timeout=35)
            if i == 0:
                module.fail_json(msg="switch not running NXOS: {}".format(p.before))
            if i == 1:
                if force:
                    p.sendline('delete {} no-prompt')
                    scp_copy(module)
                    break
                else:
                    module.exit_json(changed=False)
            if i == 2:
                if force:
                    p.sendline('y')
                    continue
                else:
                    module.exit_json(changed=False)
            if i == 3:
                p.sendline('yes')
                break
            if i == 4:
                module.fail_json(msg="Connection to file server timed out.")
            if i == 5:
                p.sendline(remote_password)
                break
            if i == 6:
                module.fail_json(msg="Error during file copy: {}".format(p.before))

        while True:
            sleep(3)
            i = p.expect(['%', '(?i)Copy complete', '(?i)login failed',
                         '(?i)Error during copy', pexpect.TIMEOUT],
                         timeout=ftp_timeout)
            if i == 0:
                sleep(1)
                continue
            if i == 1:
                p.logout()
                module.exit_json(changed=True)
            if i == 2:
                p.logout()
                module.fail_json(msg="Remote server user/password incorrect")
            if i == 3:
                p.logout()
                module.fail_json(msg="File Copy Error: {}".format(str(p)))
            if i == 4:
                module.fail_json(msg="File Copy Error: transfer timed out." +
                                 "If using FTP, try increasing ftp_timeout: {}"
                                 .format(p.before))
    except (pxssh.ExceptionPxssh, pexpect.exceptions) as e:
        module.fail_json(msg="Connection Error: {}".format(e))


def main():
    module = AnsibleModule(
        argument_spec=dict(
            host=dict(required=True, type='str'),
            username=dict(required=True, type='str'),
            password=dict(required=True, type='str', no_log=True),
            remote_server=dict(required=True, type='str'),
            remote_user=dict(required=True, type='str'),
            remote_password=dict(required=True, type='str', no_log=True),
            transport=dict(required=True, type='str', choices=['scp', 'ftp']),
            ftp_timeout=dict(required=False, type='int', default=600),
            filename=dict(required=True, type='str'),
            remote_path=dict(required=True, type='str'),
            destination=dict(required=False, default='bootflash:', type='str'),
            vrf=dict(required=False, default='management', type='str'),
            force=dict(required=False, default=False, type='bool')
        ),
        supports_check_mode=True,
    )

    host = module.params['host']
    username = module.params['username']
    password = module.params['password']
    remote_server = module.params['remote_server']
    remote_user = module.params['remote_user']
    remote_password = module.params['remote_password']
    transport = module.params['transport']
    ftp_timeout = module.params['ftp_timeout']
    remote_path = module.params['remote_path']
    filename = module.params['filename']
    destination = module.params['destination']
    vrf = module.params['vrf']
    force = module.params['force']

    file_copy(module, host, username, password, remote_server, remote_user,
              remote_password, transport, ftp_timeout, remote_path, filename,
              destination, vrf, force)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
